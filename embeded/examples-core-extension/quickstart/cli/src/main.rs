use std::path::Path;
use std::rc::Rc;

use libdeno::core::anyhow::{self, Context};
use libdeno::core::{FsModuleLoader, JsRuntime, PollEventLoopOptions, RuntimeOptions};
use libdeno::x::url;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let module_path = Path::new("static/app.js");

    let module_url = url::resolve_path(module_path).context("resolve module url")?;

    let opts = RuntimeOptions {
        module_loader: Some(Rc::new(FsModuleLoader)),
        startup_snapshot: Some(SNAPSHOT),
        extensions: vec![core_extension_quickstart_ext::hello_world::init()],
        ..Default::default()
    };

    let mut js_runtime = JsRuntime::new(opts);

    let module_id = js_runtime.load_main_es_module(&module_url).await?;
    let result = js_runtime.mod_evaluate(module_id);
    js_runtime
        .run_event_loop(PollEventLoopOptions::default())
        .await
        .context("run event-loop")?;
    result.await.context("eval module")
}

// Load the snapshot generated by build.rs:
//  const FILENAME: &'static str = std::concat!(env!("CARGO_PKG_NAME"), ".snapshot");

static SNAPSHOT: &[u8] = include_bytes!(concat!(env!("OUT_DIR"), "/", env!("CARGO_PKG_NAME"), ".snapshot"));
